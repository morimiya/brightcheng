<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>光照</title>
      <link href="/2018/12/08/%E5%85%89%E7%85%A7/"/>
      <url>/2018/12/08/%E5%85%89%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://learnopengl-cn.github.io" target="_blank" rel="noopener">https://learnopengl-cn.github.io</a> 光照学习笔记</p><p>颜色、基础光照、材质、光照贴图、投光物体、多光源。</p></blockquote><a id="more"></a><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><ul><li><p>颜色，即物体不要的颜色，即光照于其上，不被吸收的剩余部分，一般用三维向量来表示物体从一个光源反射各个颜色分量的大小，通过点乘容易得出物体被通过光反射后的颜色。</p><blockquote><p>如红光照射于物品上，其上红色被过滤了一半：<br>$dot(lightColor(1.0f, 0.0f, 0.0f),itemColor(0.5f, 0.5f, 0.31f))$<br>= $resultColor(0.5f, 0.0f, 0.0f)$</p><p>所以，光照显示的颜色最朴素的表示便是光照颜色点乘物品颜色。</p></blockquote></li></ul><hr><h2 id="基础光照"><a href="#基础光照" class="headerlink" title="基础光照"></a>基础光照</h2><h3 id="冯氏光照模型-Phong-Lighting-Model"><a href="#冯氏光照模型-Phong-Lighting-Model" class="headerlink" title="冯氏光照模型(Phong Lighting Model)"></a>冯氏光照模型(Phong Lighting Model)</h3><ul><li><p>物品由三部分光照分量组成，分别为：</p><ol><li>环境光(Ambient)<ul><li>即使在很黑暗的情况下，依稀有的一点点光亮，宛如黑夜中摸黑看见物体的轮廓。</li></ul></li><li>漫反射光(Diffuse)<ul><li>用于模拟方向性影响(Directional Imapct)，即越被光照到的地方（越是正对着光照）会越清晰。</li></ul></li><li>镜面光(Specular)<ul><li>就像杯子上的釉质，当光照射的时候会形成反光亮点，该亮点更倾向于光的颜色。即如黑色杯子反射出白色的反光亮点。</li></ul></li></ol><p><img src="/2018/12/08/光照/basic_lighting_phong.png" alt="冯氏光照模型"></p></li></ul><h3 id="环境光照"><a href="#环境光照" class="headerlink" title="环境光照"></a>环境光照</h3><ul><li>我们所处的世界不止一个光源，所看见的物品的颜色也不是由一个光源产生的结果，且物品会反射光照，从而对其他物品造成间接影响。考虑到这种情况的算法叫做<strong>全局光照</strong>，这种算法开销很大，而环境光照则是一种简化版，用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，这样子的话即便场景中没有直接的光源也能看起来存在有一些发散的光。</li></ul><h3 id="漫反射光照"><a href="#漫反射光照" class="headerlink" title="漫反射光照"></a>漫反射光照</h3><p>  <img src="/2018/12/08/光照/diffuse_light.png" alt=""></p><ul><li>法向量(Normal Vector)：垂直于片段表面的向量，一般会将之单位化，通过叉乘得出顶点的法向量。</li><li>定向的光线：作为光源的位置与片段的位置之间向量差的方向向量。为了计算这个光线，我们需要光的位置向量和片段的位置向量。</li><li>通过法向量与定向的光线，我们容易通过余弦定理计算出其夹角，两者夹角越大，光照对其产生的漫反射影响越小。在实践中，我们通过计算两者单位化后的余弦值来替代夹角以减少运算量。至于其能替代的原因，一方面因为两者正相关，另外一方面，我认为是余弦函数的表现与实际情况更相符，显示中在夹角趋于90度时，物体反射光照不是线性减弱，其趋于0度时亦然。</li><li>注意：<ol><li>片段着色器里的计算都是在世界空间坐标中进行的。所以，法向量也需要转换为世界空间坐标。</li><li>法向量不代表空间中的特定位置，没有齐次坐标（顶点位置中的w分量），即位移不应该影响到法向量。如果我们打算把法向量乘以一个模型矩阵，我们就要从矩阵中移除位移部分，只选用模型矩阵左上角3×3的矩阵（注意，我们也可以把法向量的w分量设置为0，再乘以4×4矩阵；这同样可以移除位移，目前的学习中采用此种方式）。对于法向量，我们只希望对它实施缩放和旋转变换。</li><li>如果模型矩阵执行了不等比缩放，顶点的改变会导致法向量不再垂直于表面了。因此，我们不能用这样的模型矩阵来变换法向量。\<br><img src="/2018/12/08/光照/normalvec.png" alt="缩放前后向量"></li><li>我们通过<strong>法线矩阵</strong>来解决不等比缩放问题，在顶点着色器中，我们可以通过下面的方式来计算获得法线矩阵。（对于着色器来说，逆矩阵也是一个开销比较大的运算，因此，只要可能就应该避免在着色器中进行逆矩阵运算，它们必须为你场景中的每个顶点都进行这样的处理。在绘制之前你最好用CPU计算出法线矩阵，然后通过uniform把值传递给着色器（像模型矩阵一样）。）\<br>mat3(transpose(inverse(model)))</li><li>法线矩阵推导（利用缩放前后均垂直于切线的特性证明。）（参考<a href="http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix" target="_blank" rel="noopener">http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix</a>）：<script type="math/tex; mode=display">T = P_{2} - P_{1}</script><script type="math/tex; mode=display">T * Modelview = (P_{2} - P_{1}) * Modelview</script><script type="math/tex; mode=display">T * Modelview = P_{2} * Modelview - P_{1} * Modelview</script><script type="math/tex; mode=display">T^{'} = P_{2}^{'} - P_{1}^{'}</script><script type="math/tex; mode=display">N = Q_{2} - Q_{1}</script><script type="math/tex; mode=display">设G为缩放后正确的3X3矩阵，M为模型矩阵左上角的3X3部分。</script><script type="math/tex; mode=display">N^{'}·T^{'} = (GN)·(MT) = 0</script><script type="math/tex; mode=display">(GN)·(MT) = (GN)^{T} * (MT)</script><script type="math/tex; mode=display">(GN)^{T} * (MT) = N^{T}G^{T}MT</script><script type="math/tex; mode=display">假设G^{T}M = I，那么上式变为N^{T}T</script><script type="math/tex; mode=display">于是有N^{'}·T^{'} = N·T = 0</script><script type="math/tex; mode=display">于是得出G</script><script type="math/tex; mode=display">G^{T}M = I \Longrightarrow G = (M^{-1})^{T}</script><script type="math/tex; mode=display">模型矩阵左上角的逆矩阵的转置矩阵</script></li></ol></li></ul><h3 id="镜面光照"><a href="#镜面光照" class="headerlink" title="镜面光照"></a>镜面光照</h3><p>  <img src="/2018/12/08/光照/basic_lighting_specular_theory.png" alt=""></p><ul><li>通过反射法向量周围光的方向来计算反射向量。然后我们计算反射向量和视线方向的角度差，如果夹角越小，那么镜面光的影响就会越大。它的作用效果就是，当我们去看光被物体所反射的那个方向的时候，我们会看到一个高光。</li><li>观察向量：通过观察者在世界空间位置和片段的位置来计算获得。（若希望在观察空间进行光照计算，所有相关的向量都要用观察矩阵进行变换，法线矩阵也需要进行变换。在观察空间进行光照计算的好处是观察者的位置总是(0, 0, 0)，所以这样你直接就获得了观察者位置。）</li><li>反射向量：与入射向量关于法向量成镜像但方向相反，在片段着色器中，我们可以通过reflect函数求得反射向量。reflect要求第一个向量是从光源指向片段位置的向量。vec3 reflectDir = reflect(-lightDir, norm)</li><li>反光度(Shininess)：一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。\<br><img src="/2018/12/08/光照/basic_lighting_specular_shininess.png" alt=""></li><li>镜面分量计算：<br>$float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);$</li></ul><h3 id="Gouraud着色-Gouraud-Shading"><a href="#Gouraud着色-Gouraud-Shading" class="headerlink" title="Gouraud着色(Gouraud Shading)"></a>Gouraud着色(Gouraud Shading)</h3><ul><li>在光照着色器的早期，开发者曾经在顶点着色器中实现冯氏光照模型。在顶点着色器中做光照的优势是，相比片段来说，顶点要少得多，因此会更高效，所以（开销大的）光照计算频率会更低。然而，顶点着色器中的最终颜色值是仅仅只是那个顶点的颜色值，片段的颜色值是由插值光照颜色所得来的。结果就是这种光照看起来不会非常真实，除非使用了大量顶点。</li><li>目前在雾气的实现中有使用到Gouraud着色。\<br><img src="/2018/12/08/光照/basic_lighting_gouruad.png" alt=""></li></ul><hr><h2 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h2><ul><li><p>在现实世界里，每个物体会对光产生不同的反应。</p><blockquote><p>比如说，钢看起来通常会比陶瓷花瓶更闪闪发光，木头箱子也不会像钢制箱子那样对光产生很强的反射。每个物体对镜面高光也有不同的反应。有些物体反射光的时候不会有太多的散射(Scatter)，因而产生一个较小的高光点，而有些物体则会散射很多，产生一个有着更大半径的高光点。如果我们想要在OpenGL中模拟多种类型的物体，我们必须为每个物体分别定义一个材质(Material)属性。</p></blockquote></li><li><p>利用冯氏光照模型，我们通过对物体环境光照(Ambient Lighting)、漫反射光照(Diffuse Lighting)和镜面光照(Specular Lighting)分别指定一个颜色，再加上反光度(Shininess)来得到物体的材质属性。环境光和漫反射分量一般设置成我们想要让物体所拥有的颜色，镜面分量则设置为RGB相等的值。</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Material</span> &#123;</span><br>    vec3 ambient;<br>    vec3 diffuse;<br>    vec3 specular;<br>    <span class="hljs-keyword">float</span> shininess;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>对于光，我们也可以定义光照属性，单独设置光照对物体环境光照(Ambient Lighting)、漫反射光照(Diffuse Lighting)和镜面光照(Specular Lighting)的影响值。</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Light</span> &#123;</span><br>    vec3 position;<br><br>    vec3 ambient;<br>    vec3 diffuse;<br>    vec3 specular;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>通过光照属性和材质属性的配合，我们能得到更好视觉效果：</p><figure class="hljs highlight C"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">vec3 ambient  = light.ambient * material.ambient;<br>vec3 diffuse  = light.diffuse * (diff * material.diffuse);<br>vec3 specular = light.specular * (spec * material.specular);<br></code></pre></td></tr></table></figure><ul><li><img src="/2018/12/08/光照/materials.png" alt=""></li></ul></li></ul><hr><h2 id="光照贴图"><a href="#光照贴图" class="headerlink" title="光照贴图"></a>光照贴图</h2><ul><li>仅有材质属性是不够的，世界上大多数物体不是一个纯净物状态的整体，如杯子外壁是黑色高反光而内壁则为白色反光性较低。</li></ul><h3 id="漫反射贴图-Diffuse-Map"><a href="#漫反射贴图-Diffuse-Map" class="headerlink" title="漫反射贴图(Diffuse Map)"></a>漫反射贴图(Diffuse Map)</h3><ul><li>与纹理用于获取片段在物体具体位置上的颜色相似，在光照场景中，我们用相同的方式来获取其漫反射颜色，这种纹理被叫做漫反射贴图。</li></ul><h3 id="镜面光贴图-Specular-Map"><a href="#镜面光贴图-Specular-Map" class="headerlink" title="镜面光贴图(Specular Map)"></a>镜面光贴图(Specular Map)</h3><ul><li>与漫反射贴图相同，对于镜面光我们也需要从纹理中采集，便有了镜面光贴图。</li><li>从现实角度来说，镜面高光的颜色大部分（甚至全部）都是由光源本身所决定的，所以这样并不能生成非常真实的视觉效果（这也是为什么图像通常是黑白的，我们只关心强度）。</li><li><p>增加了漫反射贴图和镜面反射贴图后，材质的数据结构改为：</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Material</span> &#123;</span><br>    sampler2D diffuse;<br>    sampler2D specular;<br>    <span class="hljs-keyword">float</span>     shininess;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>片段着色器中代码改为：</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoords));<br>vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));  <br>vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));<br>FragColor = vec4(ambient + diffuse + specular, <span class="hljs-number">1.0</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="放射光贴图-Emission-Map"><a href="#放射光贴图-Emission-Map" class="headerlink" title="放射光贴图(Emission Map)"></a>放射光贴图(Emission Map)</h3><ul><li><p>对于想让物体自发光的情况，如黑暗房间中看见一个发光的箱子等，可以通过放射光贴图实现。在片段着色器生成最终颜色时加上采样放射光贴图上的颜色，以达到忽略光照条件进行发光的效果。</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">vec3 result = ambient  + diffuse + specular + vec3(texture(material.emission, TexCoord));<br></code></pre></td></tr></table></figure></li><li><p><img src="/2018/12/08/光照/lightingmaps.png" alt=""></p></li></ul><hr><h2 id="投光物-Light-Caster"><a href="#投光物-Light-Caster" class="headerlink" title="投光物(Light Caster)"></a>投光物(Light Caster)</h2><ul><li>将光投射(Cast)到物体的光源叫做投光物(Light Caster)。</li></ul><h3 id="定向光-Directional-Light"><a href="#定向光-Directional-Light" class="headerlink" title="定向光(Directional Light)"></a>定向光(Directional Light)</h3><ul><li>当我们使用一个假设光源处于无限远处的模型时，它就被称为定向光，因为它的所有光线都有着相同的方向，它与光源的位置是没有关系的。太阳便是定向光的一个好例子。</li><li><img src="/2018/12/08/光照/light_casters_directional.png" alt=""></li><li>定向光的特点：<ul><li>光源位置对定向光无影响。</li><li>光的方向恒定且平行。</li><li>光照强度不会衰减。</li></ul></li><li><p>由于光源的位置对定向光没有影响，而光照方向恒定且平行，所以对于定向光的数据结构为：</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Light</span> &#123;</span><br>    <span class="hljs-comment">// vec3 position; // 使用定向光就不再需要了</span><br>    vec3 direction;  <span class="hljs-comment">// 光射出的方向</span><br><br>    vec3 ambient;<br>    vec3 diffuse;<br>    vec3 specular;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><img src="/2018/12/08/光照/dir_light.png" alt=""></p></li></ul><h3 id="点光源-Point-Light"><a href="#点光源-Point-Light" class="headerlink" title="点光源(Point Light)"></a>点光源(Point Light)</h3><ul><li>如同现实世界的白炽灯一般，点光源的光从一点发出，发向所有方向，光线随距离增加而衰减。</li><li><img src="/2018/12/08/光照/light_casters_point.png" alt=""></li><li>点光源的特点：<ul><li>光源位置对点光源有影响。</li><li>光从一点发出，发向所有方向。</li><li>光照强度会衰减。</li></ul></li></ul><h3 id="衰减"><a href="#衰减" class="headerlink" title="衰减"></a>衰减</h3><ul><li>随着光线传播距离的增长逐渐削减光的强度通常叫做衰减(Attenuation)。</li><li>衰减方程：<script type="math/tex; mode=display">F_{att} = \frac{1.0}{K_{c} + K_{l} * d + K_{q} * d^2}</script></li><li><p>光照衰减方程的理解：</p><ol><li>为符合先衰减得快，再衰减得慢，所以是距离倒数($\frac{1.0}{d}$)的形式。</li><li>为保证衰减值恒小于等于1，加入常数项 $K_{c}$ 。</li><li>为了加快远距离光的衰减，加入二次项 $K_{q} * d^2$ 。</li></ol></li><li><p>于是对于点光源的结构体便是：</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Light</span> &#123;</span><br>    vec3 position;  <br><br>    vec3 ambient;<br>    vec3 diffuse;<br>    vec3 specular;<br><br>    <span class="hljs-keyword">float</span> constant;<br>    <span class="hljs-keyword">float</span> linear;<br>    <span class="hljs-keyword">float</span> quadratic;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><img src="/2018/12/08/光照/point_light.png" alt=""></p></li></ul><h3 id="聚光-Spotlight"><a href="#聚光-Spotlight" class="headerlink" title="聚光(Spotlight)"></a>聚光(Spotlight)</h3><ul><li>只朝特定方向而不是所有方向发射光线，如现实世界中的手电筒。</li><li>OpenGL中聚光是用一个世界空间位置、一个方向和一个切光角(Cutoff Angle)来表示的，切光角指定了聚光的半径。对于每个片段，我们会计算片段是否位于聚光的切光方向之间（也就是在锥形内），如果是的话，我们就会相应地照亮片段。</li><li><img src="/2018/12/08/光照/light_casters_spotlight_angles.png" alt=""></li><li>LightDir：从片段指向光源的向量。</li><li>SpotDir：聚光所指向的方向。</li><li>Phiϕ：指定了聚光半径的切光角。落在这个角度之外的物体都不会被这个聚光所照亮。</li><li>Thetaθ：LightDir向量和SpotDir向量之间的夹角。在聚光内部的话θ值应该比ϕ值小。</li><li>在实际运算中，我们用LightDir和SpotDir的点积与切光角ϕ的余弦值比较大小来替代角度大小比较，以减少计算量。</li></ul><h3 id="平滑边缘"><a href="#平滑边缘" class="headerlink" title="平滑边缘"></a>平滑边缘</h3><ul><li>用上面的方式创造出来的聚光的边缘界限会很明显，与现实不相符。</li><li><img src="/2018/12/08/光照/spot_light1.png" alt=""></li><li>通过设置内圆锥(Inner Cone)和外圆锥(Outer Cone)的方式，对于落在内圆锥外及外圆锥内的光，让其光照从内圆锥逐渐向外圆锥减少至0。</li><li><p>使用的递减公式为：</p><script type="math/tex; mode=display">I= \frac{\theta - \gamma}{\epsilon}</script><blockquote><p>这里ϵ(Epsilon)是内（ϕ）和外圆锥（γ）之间的余弦值差（ϵ=ϕ−γ）。最终的I值就是在当前片段聚光的强度。</p></blockquote></li><li><p>聚光的特点：</p><ul><li>光源位置对聚光有影响。</li><li>光从一点发出，发向指定方向，即光被聚集在一个范围内。</li></ul></li><li><p>对于聚光的结构体为：</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Light</span> &#123;</span><br>vec3 position;<br>  vec3 direction;<br><span class="hljs-keyword">float</span> cutOff;<br><span class="hljs-keyword">float</span> outerCutOff;<br><br>  vec3 ambient;<br>  vec3 diffuse;<br>  vec3 specular;<br><br>  <span class="hljs-comment">// float constant;</span><br>  <span class="hljs-comment">// float linear;</span><br>  <span class="hljs-comment">// float quadratic;</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><img src="/2018/12/08/光照/spot_light2.png" alt=""></p></li><li><p>最终计算聚光的片段着色器代码为：</p><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 环境光</span><br>vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));<br>vec3 diffuse = vec3(<span class="hljs-number">0</span>);<br>vec3 specular = vec3(<span class="hljs-number">0</span>);<br><br>vec3 norm = normalize(Normal);<br>vec3 lightDir = normalize(light.position - FragPos);<br><span class="hljs-keyword">float</span> theta = dot(lightDir, normalize(-light.direction));<br><span class="hljs-keyword">float</span> epsilon   = light.cutOff - light.outerCutOff;<br><span class="hljs-keyword">float</span> intensity = clamp((theta - light.outerCutOff) / epsilon, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br><br><span class="hljs-keyword">if</span>(theta &gt; light.outerCutOff) &#123;<br><span class="hljs-comment">// 漫反射光</span><br><span class="hljs-keyword">float</span> diff = max(dot(norm, lightDir), <span class="hljs-number">0.0</span>);<br>diffuse = intensity * light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));<br><br><span class="hljs-comment">// 镜面光</span><br>vec3 viewDir = normalize(viewPos - FragPos);<br>vec3 reflectDir = reflect(-lightDir, norm);<br><span class="hljs-keyword">float</span> spec = <span class="hljs-built_in">pow</span>(max(dot(viewDir, reflectDir), <span class="hljs-number">0.0</span>), material.shininess);<br>specular = intensity * light.specular * spec * vec3(texture(material.specular, TexCoord));<br>&#125;<br><br>vec3 result = ambient  + diffuse + specular;<br>FragColor = vec4(result, <span class="hljs-number">1.0</span>);<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="多光源-Multiple-lights"><a href="#多光源-Multiple-lights" class="headerlink" title="多光源(Multiple lights)"></a>多光源(Multiple lights)</h2><ul><li>将冯氏着色(Phong Shading)、材质(Material)、光照贴图(Lighting Map)以及不同种类的投光物(Light Caster)等零碎知识都放于同一场景中。</li><li>对光照的计算将会变成下面的样式：<figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">out vec4 FragColor;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>  <span class="hljs-comment">// 定义一个输出颜色值</span><br>  vec3 output;<br>  <span class="hljs-comment">// 将定向光的贡献加到输出中</span><br>  output += someFunctionToCalculateDirectionalLight();<br>  <span class="hljs-comment">// 对所有的点光源也做相同的事情</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nr_of_point_lights; i++)<br>    output += someFunctionToCalculatePointLight();<br>  <span class="hljs-comment">// 也加上其它的光源（比如聚光）</span><br>  output += someFunctionToCalculateSpotLight();<br><br>  FragColor = vec4(output, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="定向光"><a href="#定向光" class="headerlink" title="定向光"></a>定向光</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DirLight</span> &#123;</span><br>    vec3 direction;<br><br>    vec3 ambient;<br>    vec3 diffuse;<br>    vec3 specular;<br>&#125;;  <br>uniform DirLight dirLight;<br><br><span class="hljs-function">vec3 <span class="hljs-title">CalcDirLight</span><span class="hljs-params">(DirLight light, vec3 normal, vec3 viewDir)</span><br></span>&#123;<br>    vec3 lightDir = normalize(-light.direction);<br>    <span class="hljs-comment">// 漫反射着色</span><br>    <span class="hljs-keyword">float</span> diff = max(dot(normal, lightDir), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-comment">// 镜面光着色</span><br>    vec3 reflectDir = reflect(-lightDir, normal);<br>    <span class="hljs-keyword">float</span> spec = <span class="hljs-built_in">pow</span>(max(dot(viewDir, reflectDir), <span class="hljs-number">0.0</span>), material.shininess);<br>    <span class="hljs-comment">// 合并结果</span><br>    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoords));<br>    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));<br>    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));<br>    <span class="hljs-keyword">return</span> (ambient + diffuse + specular);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="点光源"><a href="#点光源" class="headerlink" title="点光源"></a>点光源</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PointLight</span> &#123;</span><br>    vec3 position;<br><br>    <span class="hljs-keyword">float</span> constant;<br>    <span class="hljs-keyword">float</span> linear;<br>    <span class="hljs-keyword">float</span> quadratic;<br><br>    vec3 ambient;<br>    vec3 diffuse;<br>    vec3 specular;<br>&#125;;  <br><br><span class="hljs-function">vec3 <span class="hljs-title">CalcPointLight</span><span class="hljs-params">(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)</span><br></span>&#123;<br>    vec3 lightDir = normalize(light.position - fragPos);<br>    <span class="hljs-comment">// 漫反射着色</span><br>    <span class="hljs-keyword">float</span> diff = max(dot(normal, lightDir), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-comment">// 镜面光着色</span><br>    vec3 reflectDir = reflect(-lightDir, normal);<br>    <span class="hljs-keyword">float</span> spec = <span class="hljs-built_in">pow</span>(max(dot(viewDir, reflectDir), <span class="hljs-number">0.0</span>), material.shininess);<br>    <span class="hljs-comment">// 衰减</span><br>    <span class="hljs-keyword">float</span> distance    = length(light.position - fragPos);<br>    <span class="hljs-keyword">float</span> attenuation = <span class="hljs-number">1.0</span> / (light.constant + light.linear * distance +<br>                 light.quadratic * (distance * distance));    <br>    <span class="hljs-comment">// 合并结果</span><br>    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoords));<br>    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));<br>    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));<br>    ambient  * = attenuation;<br>    diffuse  * = attenuation;<br>    specular * = attenuation;<br>    <span class="hljs-keyword">return</span> (ambient + diffuse + specular);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="聚光"><a href="#聚光" class="headerlink" title="聚光"></a>聚光</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SpotLight</span> &#123;</span><br>vec3 position;<br>vec3 direction;<br><br><span class="hljs-keyword">float</span> cutOff;<br><span class="hljs-keyword">float</span> outerCutOff;<br><br><span class="hljs-keyword">float</span> constant;<br>  <span class="hljs-keyword">float</span> linear;<br>  <span class="hljs-keyword">float</span> quadratic;<br><br>vec3 ambient;<br>  vec3 diffuse;<br>  vec3 specular;<br>&#125;;<br><br><span class="hljs-function">vec3 <span class="hljs-title">CalcSpotLight</span><span class="hljs-params">(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)</span><br></span>&#123;<br><span class="hljs-comment">// 环境光</span><br>  vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));<br>vec3 diffuse = vec3(<span class="hljs-number">0</span>);<br>vec3 specular = vec3(<span class="hljs-number">0</span>);<br><br>vec3 lightDir = normalize(light.position - fragPos);<br><span class="hljs-keyword">float</span> theta = dot(lightDir, normalize(-light.direction));<br><span class="hljs-keyword">float</span> epsilon   = light.cutOff - light.outerCutOff;<br><span class="hljs-keyword">float</span> intensity = clamp((theta - light.outerCutOff) / epsilon, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br><br><span class="hljs-keyword">if</span>(theta &gt; light.outerCutOff) &#123;<br><span class="hljs-comment">// 漫反射光</span><br><span class="hljs-keyword">float</span> diff = max(dot(normal, lightDir), <span class="hljs-number">0.0</span>);<br>diffuse = intensity * light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));<br><br><span class="hljs-comment">// 镜面光</span><br>vec3 viewDir = normalize(viewPos - fragPos);<br>vec3 reflectDir = reflect(-lightDir, normal);<br><span class="hljs-keyword">float</span> spec = <span class="hljs-built_in">pow</span>(max(dot(viewDir, reflectDir), <span class="hljs-number">0.0</span>), material.shininess);<br>specular = intensity * light.specular * spec * vec3(texture(material.specular, TexCoord));<br>&#125;<br><br><span class="hljs-keyword">float</span> disition = length(light.position - fragPos);<br><span class="hljs-keyword">float</span> attennuation = <span class="hljs-number">1.0</span> / (light.constant + light.linear * disition + light.quadratic * disition * disition);<br><br>    <span class="hljs-keyword">return</span> attennuation * (ambient  + diffuse + specular);<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
